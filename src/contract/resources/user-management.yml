openapi: "3.0.1"
info:
  title: OpenApi definition
  version: v0
servers:
  - url: http://localhost:8081/user-management/v1/api
    description: Generated server url
tags:
  - name: user-management-controller

paths:
  /user-management/v1/users:
    get:
      tags:
        - user-management-controller
      summary: get a list of user
      operationId: getUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResource'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found

  /user-management/v1/users/{id}:
    get:
      tags:
        - user-management-controller
      summary: get a user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found

  /user-management/v1/check-user-exists:
    get:
      tags:
        - user-management-controller
      summary: check if existing an user by id and email
      operationId: checkUserExists
      parameters:
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckUserExistsResource'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found

  /user-management/v1/create-user:
    post:
      tags:
        - user-management-controller
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: new user dto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResource'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found

  /user-management/v1/update-user:
    put:
      summary: update an existing user
      operationId: updateUser
      tags:
        - user-management-controller
      requestBody:
        description: update user dto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResource'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found

components:
  schemas:
    UsersResource:
      type: object
      properties:
        UsersList:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'

    UserResource:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        birthPlace:
          type: string
          format: date
        address:
          type: string
        postalCode:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        isValid:
          type: boolean

    CreateUserDto:
      type: object
      required:
        - name
        - surname
        - email
        - password
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string

    CreateUserResource:
      type: object
      properties:
        userId:
          type: string
        isCreatedUser:
          type: boolean

    UserDto:
      type: object
      required:
        - id
        - email
        - password
        - isValid
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        isValid:
          type: boolean
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        birthPlace:
          type: string
        address:
          type: string
        phone:
          type: string


    UpdateUserResource:
      type: object
      properties:
        userId:
          type: string
        isUpdateUser:
          type: boolean

    CheckUserExistsResource:
      type: object
      properties:
        isUserExists:
          type: boolean